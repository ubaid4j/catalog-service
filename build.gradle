buildscript {
    dependencies {
        classpath 'org.graalvm.buildtools:native-gradle-plugin:0.9.25'
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.3'
    id 'io.spring.dependency-management' version '1.1.2'
    id 'org.graalvm.buildtools.native' version '0.9.25'
}

if (project.hasProperty('native')) {
    apply plugin: 'org.graalvm.buildtools.native'
}

group = 'dev.ubaid'
version = '0.0.4-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2022.0.3")
    set('testcontainersVersion', "1.18.3")
    set('testKeycloakVersion', "3.0.0")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.retry:spring-retry'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.flywaydb:flyway-core'
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-webflux'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation "com.github.dasniko:testcontainers-keycloak:${testKeycloakVersion}"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
    }
}

bootRun {
    systemProperty 'spring.profiles.active', 'testdata'
}

tasks.named('test') {
    useJUnitPlatform()
}

bootBuildImage {
    builder="paketobuildpacks/builder-jammy-full"
    if (project.hasProperty("native")) {
        environment = [
                'SPRING_PROFILES_ACTIVE': 'prod',
                'BP_NATIVE_IMAGE': 'true',

        ]
    } else {
        environment = [
                'SPRING_PROFILES_ACTIVE': 'prod',
        ]
    }
    docker {
        if (project.hasProperty("ci")) {
            // configure the publishRegistry task here
            publishRegistry {
                username=project.findProperty("registryUsername")
                password=project.findProperty("registryToken")
                url=project.findProperty("registryUrl")
            }
        }
    }
}
